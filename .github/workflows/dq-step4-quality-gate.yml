name: DQ Step 4 — Quality Gate (fail on any DQ failures)
on:
  workflow_dispatch:
    inputs:
      force_fail:
        description: "Force a Slack alert (yes/no)"
        required: false
        default: "no"

jobs:
  dq-gate:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      BUCKET: yesh-mldev
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Java & deps
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jre-headless
          pip install pyspark==3.5.1 great_expectations==0.18.14 pandas numpy boto3

      - name: Generate fake data
        run: python dq/generate_fake_data.py

      - name: Run Spark + GE validation
        run: python dq/spark_validate.py

      - name: Print summary
        run: |
          echo "=== SUMMARY ==="
          cat artifacts/summary.json || true

      - name: Compute failure count
        id: failcount
        env:
          FORCE_FAIL: ${{ github.event.inputs.force_fail }}
        run: |
          FAILED=$(python -c "import json; s=json.load(open('artifacts/summary.json')); print(s['claims']['failed']+s['ehr']['failed'])")
          if [ \"${FORCE_FAIL}\" = \"yes\" ]; then FAILED=$((FAILED+1)); fi
          echo "FAILED_CHECKS=$FAILED"
          echo "failed=$FAILED" >> "$GITHUB_OUTPUT"

      - name: Slack alert (on failures)
        if: steps.failcount.outputs.failed != '0'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          FAILS: ${{ steps.failcount.outputs.failed }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          REPO: ${{ github.repository }}
        run: |
          payload='{"text":"*DQ ALERT* ❌\nRepo: '"$REPO"'\nRun: '"$RUN_URL"'\nFailed checks: '"$FAILS"'."}'
          curl -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL"

      - name: Enforce quality gate
        if: steps.failcount.outputs.failed != '0'
        run: |
          echo "❌ Data Quality Gate failed: ${{ steps.failcount.outputs.failed }} checks failed."
          exit 1

      - name: Configure AWS (gate passed)
        if: steps.failcount.outputs.failed == '0'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload reports to S3 (gate passed)
        if: steps.failcount.outputs.failed == '0'
        run: |
          RUN_ID=${{ github.run_id }}
          aws s3 cp artifacts/data_docs s3://$BUCKET/dq/$RUN_ID/data_docs/ --recursive
          aws s3 cp artifacts/summary.json s3://$BUCKET/dq/$RUN_ID/summary.json
          echo "✅ Gate passed. Reports at s3://$BUCKET/dq/$RUN_ID/"
